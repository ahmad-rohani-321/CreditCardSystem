using DevExpress.XtraEditors;
using System;

namespace CreditCardSystem.Views
{
    public partial class TransactionActions : XtraForm
    {
        #region fields
        private readonly Controllers.Transactions _transactions;
        private readonly Controllers.Parties _parties;
        private decimal _fromBalance = 0M;
        private decimal _toBalance = 0M;
        private Model.Party _fromParty;
        private Model.Party _toParty;
        #endregion

        #region constructor
        public TransactionActions()
        {
            InitializeComponent();
            _transactions = new();
            _parties = new();
            calendar.DateTime = DateTime.Now;
            txtTransactionTypes.Properties.Items.AddRange(Defaults.DefaultTransactionTypes);
        }
        #endregion

        #region code generated by visual studio code 
        private void btnSave_Click(object sender, EventArgs e)
        {
            if (ValidateForm())
            {
                bool added = _transactions.AddTransaction(
                    _fromParty == null ? 0 : _fromParty.Id,
                    _toParty.Id,
                    txtValue.Value,
                    txtRemarks.Text,
                    txtTransactionTypes.SelectedIndex,
                    txtCashType.SelectedIndex,
                    calendar.DateTime,
                    txtPhoneNumbers.Text
                    );
                if (added)
                {
                    Defaults.MessageBox();
                    ClearForm();
                }
                else
                {
                    Defaults.ErrorMessageBox();
                }
            }
        }
        private void btnClear_Click(object sender, EventArgs e)
        {
            ClearForm();
        }

        private void TransactionActions_Load(object sender, EventArgs e)
        {
            if (!_transactions.IsAllowed())
                Close();
        }

        private void txtTransactionTypes_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (txtTransactionTypes.SelectedIndex)
            {
                case 0:
                    // do sale
                    txtFromAccount.Properties.DataSource = _parties.GetParties(Defaults.DefaultPartyTypes[2]);
                    txtToAccount.Properties.DataSource = _parties.GetParties(Defaults.DefaultPartyTypes[0]);
                    break;
                case 1:
                    // purchase
                    txtFromAccount.Properties.DataSource = _parties.GetParties(Defaults.DefaultPartyTypes[1]);
                    txtToAccount.Properties.DataSource = _parties.GetParties(Defaults.DefaultPartyTypes[2]);
                    break;
                case 2:
                    // do exchange
                    txtFromAccount.Properties.DataSource = _parties.GetParties(Defaults.DefaultPartyTypes[2]);
                    txtToAccount.Properties.DataSource = _parties.GetParties(Defaults.DefaultPartyTypes[2]);
                    break;
                case 3:
                    // do receive
                    //txtFromAccount.Properties.DataSource = _parties.GetParties("دخل");
                    txtFromAccount.Enabled = false;
                    txtCashType.Enabled = true;
                    txtToAccount.Properties.DataSource = _parties.GetParties(Defaults.DefaultPartyTypes[1], Defaults.DefaultPartyTypes[0]);
                    break;
            }
        }
        private void TransactionActions_FormClosing(object sender, System.Windows.Forms.FormClosingEventArgs e)
        {
            _transactions.Dispose();
            _parties.Dispose();
        }
        private void txtValue_EditValueChanged(object sender, EventArgs e)
        {
            CalculateBalance();
        }
        private void txtFrom_EditValueChanged(object sender, EventArgs e)
        {
            ClearForm();
            _fromParty = (Model.Party)txtFromAccount.EditValue;
            if (_fromParty != null)
            {
                _fromBalance = _transactions.GetLastBalance(_fromParty.Id);
                txtPhoneNumbers.Properties.Items.AddRange(_fromParty.PhoneNumbers);
                lblFromBalance.Text = $"بلانس {_fromBalance}";
            }
        }
        private void txtSystem_EditValueChanged(object sender, EventArgs e)
        {
            _toParty = (Model.Party)txtToAccount.EditValue;
            if (_toParty != null)
            {
                _toBalance = _transactions.GetLastBalance(_toParty.Id);
                lblToBalance.Text = $"بلانس {_toBalance}";
            }
        }
        private void txtCashType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (txtTransactionTypes.SelectedIndex == 3)
                CalculateBalance();
        }
        #endregion

        #region code written handed
        private void CalculateBalance()
        {
            switch (txtTransactionTypes.SelectedIndex)
            {
                case 0:
                    // do sale
                    lblFromBalance.Text = $"بلانس {_fromBalance - txtValue.Value}";
                    lblToBalance.Text = $"بلانس {_toBalance + txtValue.Value}";
                    break;
                case 1:
                    // purchase
                    lblFromBalance.Text = $"بلانس {_fromBalance - txtValue.Value}";
                    lblToBalance.Text = $"بلانس {_toBalance + txtValue.Value}";
                    break;
                case 2:
                    // do exchange
                    lblFromBalance.Text = $"بلانس {_fromBalance - txtValue.Value}";
                    lblToBalance.Text = $"بلانس {_toBalance + txtValue.Value}";
                    break;
                case 3:
                    // do receive
                    //lblFromBalance.Text = $"بلانس {_fromBalance - txtValue.Value}";
                    // credit
                    if (txtCashType.SelectedIndex == 0)
                    {
                        lblToBalance.Text = $"بلانس {_toBalance + txtValue.Value}";
                    }
                    // debit
                    else
                    {
                        lblToBalance.Text = $"بلانس {_toBalance - txtValue.Value}";
                    }
                    break;
            }
        }
        private void ClearForm()
        {
            txtFromAccount.EditValue = null;
            txtFromAccount.ErrorText = string.Empty;
            txtToAccount.EditValue = null;
            txtToAccount.ErrorText = string.Empty;
            txtValue.Value = 0;
            txtValue.ErrorText = string.Empty;
            txtRemarks.Text = string.Empty;
            calendar.DateTime = DateTime.Now;
            txtTransactionTypes.SelectedIndex = -1;
            _fromBalance = 0;
            _toBalance = 0;
            _fromParty = null;
            _toParty = null;
            lblFromBalance.Text = string.Empty;
            lblToBalance.Text = string.Empty;
            txtFromAccount.Enabled = true;
            txtCashType.Enabled = false;
            txtPhoneNumbers.Properties.Items.Clear();
        }

        private bool ValidateForm()
        {
            bool isValid = true;

            if (txtTransactionTypes.SelectedIndex < 0)
            {
                txtTransactionTypes.ErrorText = "لطفاً د معاملې ډول انتخاب کړئ";
                isValid = false;
            }
            else
            {
                txtTransactionTypes.ErrorText = string.Empty;
            }

            if (txtTransactionTypes.SelectedIndex != 3 && txtFromAccount.EditValue == null)
            {
                txtFromAccount.ErrorText = "لطفاً عرضه کوونکی انتخاب کړئ";
                isValid = false;
            }
            else if (txtToAccount.EditValue == null)
            {
                txtToAccount.ErrorText = "لطفاً سیسټم انتخاب کړئ";
                isValid = false;
            }
            else if (txtFromAccount.EditValue == txtToAccount.EditValue)
            {
                txtFromAccount.ErrorText = "لطفاً او سیسټم دواړه یو شخص مه انتخابوئ";
                isValid = false;
            }
            else
            {
                txtFromAccount.ErrorText = string.Empty;
                txtToAccount.ErrorText = string.Empty;
            }

            if (txtValue.Value <= 0)
            {
                txtValue.ErrorText = "لطفاً مبلغ ولیکئ";
                isValid = false;
            }
            else if ((txtTransactionTypes.SelectedIndex == 0 || txtTransactionTypes.SelectedIndex == 2 ) && _fromBalance <= 0)
            {
                txtFromAccount.ErrorText = "د نوموړي شخص بلانس صفر دی";
                isValid = false;
            }
            else
            {
                txtFromAccount.ErrorText = string.Empty;
                txtValue.ErrorText = string.Empty;
            }

            return isValid;
        }
        #endregion

    }
}